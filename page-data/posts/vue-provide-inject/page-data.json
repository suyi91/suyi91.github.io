{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/vue-provide-inject","result":{"data":{"markdownRemark":{"id":"a8bb5255-d7f4-51b8-8d32-37ce0146c5f5","html":"<p>最近在工作中，被一个同事问到了provide/inject的用法。这不简单嘛，当即给出答案大致如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 祖先组件</span>\n  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    prop1<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      prop1<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prop1\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 子孙组件</span>\n  inject<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prop1'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>过了会儿同事又来找我: <em>“prop1的响应式没了…”</em>。此时才回忆到Vuejs的<a href=\"https://cn.vuejs.org/v2/api/#provide-inject\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>上说明过，<code class=\"language-text\">provide/inject</code>的绑定不是响应式的。想给同事说明正确用法，但同事因为比较忙继续用<code class=\"language-text\">props</code>了。</p>\n<p>想到自己被问到Vuejs中Api的用法时答得不准确，该好好看看源码和文档了。</p>\n<h2 id=\"provideinject的用法\" style=\"position:relative;\"><a href=\"#provideinject%E7%9A%84%E7%94%A8%E6%B3%95\" aria-label=\"provideinject的用法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provide/Inject的用法</h2>\n<p>provide和inject是Vuejs为了祖先和子孙组件间提供的便捷的传递数值方法的Api。适合高阶插件/组件库开发时使用。</p>\n<p><strong><em>provide和inject的绑定不是响应式的。</em></strong></p>\n<h3 id=\"类型\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B\" aria-label=\"类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型</h3>\n<p>provide：<code class=\"language-text\">Object | () =&gt; Object</code></p>\n<p>inject：<code class=\"language-text\">Array&lt;string&gt; | { [key: string]: string | Symbol | Object }</code></p>\n<h3 id=\"provide说明\" style=\"position:relative;\"><a href=\"#provide%E8%AF%B4%E6%98%8E\" aria-label=\"provide说明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>provide说明</h3>\n<p>如类型定义所示，<code class=\"language-text\">provide</code>接受一个对象或者一个生成对象的函数，给所有子孙组件注入接收到的值。对象的键可以为ES6的<code class=\"language-text\">Symbol</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 接受一个对象</span>\n  provide<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    prop1<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 或者接受一个生成对象的函数</span>\n  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      prop1<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"inject说明\" style=\"position:relative;\"><a href=\"#inject%E8%AF%B4%E6%98%8E\" aria-label=\"inject说明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inject说明</h3>\n<p>如类型定义所示，<code class=\"language-text\">inject</code>接受一个字符串数组或者一个键值对象，可以获取到祖先注入的属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 接受字符串数组</span>\n  inject<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prop1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// => this.prop1</span>\n  <span class=\"token comment\">// 接受键值对象</span>\n  inject<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    newProp1<span class=\"token operator\">:</span> <span class=\"token string\">'prop1'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// => this.newProp1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>另外，<code class=\"language-text\">inject</code>传入键值对象时，值支持带有<code class=\"language-text\">from</code>和<code class=\"language-text\">default</code>的对象，用于设置inject值的来源名称和默认值。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  inject<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 一个不存在的provide属性</span>\n    prop3<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> <span class=\"token string\">'prop2'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.prop3即为[6, 6, 6]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"provideinject的源码实现\" style=\"position:relative;\"><a href=\"#provideinject%E7%9A%84%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0\" aria-label=\"provideinject的源码实现 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provide/Inject的源码实现</h2>\n<p>看完了Api文档，该看看具体的源码实现了。</p>\n<p>首先是组件初始化的地方<code class=\"language-text\">src/core/instance/init.js</code>的<code class=\"language-text\">initMixin</code>方法中，在组件的<code class=\"language-text\">data/props</code>加载前后先后执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token comment\">// expose real self</span>\n vm<span class=\"token punctuation\">.</span>_self <span class=\"token operator\">=</span> vm\n <span class=\"token function\">initLifecycle</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n <span class=\"token function\">initEvents</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n <span class=\"token function\">initRender</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeCreate'</span><span class=\"token punctuation\">)</span>\n <span class=\"token function\">initInjections</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span> <span class=\"token comment\">// resolve injections before data/props</span>\n <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n <span class=\"token function\">initProvide</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span> <span class=\"token comment\">// resolve provide after data/props</span>\n <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'created'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"initprovide\" style=\"position:relative;\"><a href=\"#initprovide\" aria-label=\"initprovide permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>initProvide</h3>\n<p>provide初始化的代码在<code class=\"language-text\">src/core/instance/inject.js</code>中。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initProvide</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token operator\">:</span> Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> provide <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>provide\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>provide<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>_provided <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> provide <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n      <span class=\"token operator\">?</span> <span class=\"token function\">provide</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> provide\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>逻辑很简单，读取定义的<code class=\"language-text\">provide</code>并赋值在组件的<code class=\"language-text\">_provided</code>属性上。</p>\n<h3 id=\"initinjections\" style=\"position:relative;\"><a href=\"#initinjections\" aria-label=\"initinjections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>initInjections</h3>\n<p>inject初始化的代码在<code class=\"language-text\">src/core/instance/inject.js</code>中，下面分2步解析一下。</p>\n<h4 id=\"inject初始化的整体流程\" style=\"position:relative;\"><a href=\"#inject%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B\" aria-label=\"inject初始化的整体流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inject初始化的整体流程</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initInjections</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token operator\">:</span> Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">resolveInject</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>inject<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">toggleObserving</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 省略部分代码</span>\n      <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 省略部分代码</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">toggleObserving</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>整体上说，inject的实现分为2步:</p>\n<ol>\n<li>调用<code class=\"language-text\">resolveInject</code>方法解析出所有有效的<code class=\"language-text\">inject</code>键值对存放在<code class=\"language-text\">result</code>中。</li>\n<li>遍历<code class=\"language-text\">result</code>将所有键值对定义到组件的上下文<code class=\"language-text\">vm</code>中。</li>\n</ol>\n<h4 id=\"inject定义的解析\" style=\"position:relative;\"><a href=\"#inject%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A7%A3%E6%9E%90\" aria-label=\"inject定义的解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inject定义的解析</h4>\n<p>inject的解析在方法<code class=\"language-text\">resolveInject</code>中(也在当前文件<code class=\"language-text\">src/core/instance/inject.js</code>)。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 省略了部分不重要的代码</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolveInject</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">inject<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> vm<span class=\"token operator\">:</span> Component</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Object <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建临时变量</span>\n  <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> hasSymbol             <span class=\"token comment\">// 获取所有在inject中定义的键</span>\n      <span class=\"token operator\">?</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>inject<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>inject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 循环处理每一个键</span>\n    <span class=\"token keyword\">const</span> provideKey <span class=\"token operator\">=</span> inject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>from\n    <span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> vm\n    <span class=\"token comment\">// 从当前组件不断查找父级组件满足条件的provide定义</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>_provided <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>_provided<span class=\"token punctuation\">,</span> provideKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>_provided<span class=\"token punctuation\">[</span>provideKey<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token punctuation\">}</span>\n      source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>$parent\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// provide定义没有找到时</span>\n    <span class=\"token comment\">// 如果inject定义了default就直接取值(或执行)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span> <span class=\"token keyword\">in</span> inject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> provideDefault <span class=\"token operator\">=</span> inject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>default\n        result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> provideDefault <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n          <span class=\"token operator\">?</span> <span class=\"token function\">provideDefault</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">:</span> provideDefault\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Injection \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" not found</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"inject的键值注入\" style=\"position:relative;\"><a href=\"#inject%E7%9A%84%E9%94%AE%E5%80%BC%E6%B3%A8%E5%85%A5\" aria-label=\"inject的键值注入 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inject的键值注入</h4>\n<p>暂时关闭Vue内部的响应式flag，定义属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">toggleObserving</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 省略部分代码</span>\n  <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 省略部分代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">toggleObserving</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">toggleObserving</code>为<code class=\"language-text\">src/core/observer/index.js</code>中Vue核心的是否开启响应式的flag。</li>\n<li><code class=\"language-text\">defineReactive</code>即为Vuejs的核心实现方式，不介绍了。</li>\n</ol>\n<p>经过了上面的步骤inject完成了注入。</p>\n<h2 id=\"provideinject如何实现绑定响应式\" style=\"position:relative;\"><a href=\"#provideinject%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%91%E5%AE%9A%E5%93%8D%E5%BA%94%E5%BC%8F\" aria-label=\"provideinject如何实现绑定响应式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provide/Inject如何实现绑定响应式</h2>\n<p><code class=\"language-text\">provide/inject</code>直接注入没有响应式，但是可以通过<code class=\"language-text\">对象属性</code>实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    wrapper<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      wrapper<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  inject<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'wrapper'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 此时wrapper.a、wrapper.b是响应式的</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>这也就是Api文档中说的<code class=\"language-text\">如果你传入了一个可监听的对象，那么其对象的属性还是可响应的</code>。</p>\n</blockquote>\n<p>看到这里，😁可以找同事吹牛了。</p>\n<h2 id=\"感想\" style=\"position:relative;\"><a href=\"#%E6%84%9F%E6%83%B3\" aria-label=\"感想 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感想</h2>\n<ol>\n<li>Vuejs的文档中记录了很多很细的知识点，对于需要使用它做开发的人员来说，必须全面阅读梳理一遍。如果有时间也应该翻翻源码的实现，学习一些开发技巧、了解相关的知识。原来源码并没有想象的那么深奥。</li>\n<li>Vuejs的Api越来越多(最开始接触时<code class=\"language-text\">inject</code>还没有<code class=\"language-text\">default</code>属性)，虽然上手依旧很快，但对于初学者来说Vuejs学习成本也在逐步升高。</li>\n</ol>","fields":{"slug":"/posts/vue-provide-inject","tagSlugs":["/tag/前端/","/tag/vuejs/"]},"frontmatter":{"date":"2020-02-23 23:00","description":"最近在工作中，被一个同事问到了provide/inject的用法。这不简单嘛，当即给出答案...","tags":["前端","Vuejs"],"title":"Vuejs中的provide/inject","socialImage":"vue.jpg"}}},"pageContext":{"slug":"/posts/vue-provide-inject"}}}