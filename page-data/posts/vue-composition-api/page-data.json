{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/vue-composition-api","result":{"data":{"markdownRemark":{"id":"b31ad71f-99fc-5d0b-99f3-d534e773fb62","html":"<p>2019年下半年，Vuejs官方推出了<a href=\"https://composition-api.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">CompositionApi RFC</code></a>，敲定了Vue3的函数式Api设计。为了让广大Vuejs使用者可以提前尝鲜，官方推出了Vue2的兼容库<a href=\"https://www.npmjs.com/package/@vue/composition-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">@vue/composition-api</code></a>(原名<a href=\"https://www.npmjs.com/package/vue-function-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">vue-function-api</code></a>)。</p>\n<p>作为一个对新事物充满了好奇的人，<code class=\"language-text\">CompositionApi</code>刚推出时就开始在业务中尝试使用。对比之前的Vue组件书写方式，<code class=\"language-text\">CompositionApi</code>的函数式一直用一直爽。</p>\n<h2 id=\"vue组件的写法\" style=\"position:relative;\"><a href=\"#vue%E7%BB%84%E4%BB%B6%E7%9A%84%E5%86%99%E6%B3%95\" aria-label=\"vue组件的写法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue组件的写法</h2>\n<h3 id=\"options定义\" style=\"position:relative;\"><a href=\"#options%E5%AE%9A%E4%B9%89\" aria-label=\"options定义 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>options定义</h3>\n<p>Vuejs中存在最久的定义方式，通过定义对象属性的方式，实现Vue组件。一个简单的🌰如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'CustomComponent'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 组件mounted时执行的方法</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>options定义的方式书写简单，易于上手(组里的后端同学也可以较快地写起代码来)。</p>\n<p>options方式Api写久了，也暴露了一些问题:</p>\n<ol>\n<li>记忆负担大。Vue组件的Api很多，都需要记忆。</li>\n<li>类型系统差，TS支持堪忧。TS作为前端之路的一个趋势已经工程质量的一种保障方式，建议项目都可以接入，但是Vue组件支持很差(由于<code class=\"language-text\">this.xxx</code>以及tions定义的属性取得不同于js对象属性获取)，需要各种hack和IDE插件。</li>\n<li>相关业务逻辑代码分隔过远。如果一段业务逻辑代码既存在于data、又存在于methods，复杂组件内部分隔过远比较影响可读性。</li>\n<li>相同逻辑复用困难。options方式实现的代码中会存在大量的<code class=\"language-text\">this.xxx</code>调用，不利于通用逻辑提取。(Vuejs官方为了解决复用问题引入了<code class=\"language-text\">mixins</code>的概念，但带来了其他的问题，已计划大版本升级时删除)。</li>\n</ol>\n<h3 id=\"class组件\" style=\"position:relative;\"><a href=\"#class%E7%BB%84%E4%BB%B6\" aria-label=\"class组件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>class组件</h3>\n<p>有点类似隔壁Angular的组件定义方式，Vuejs官方推出过<a href=\"https://github.com/vuejs/vue-class-component\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">vue-class-component</code></a>库(还有一个扩展库<a href=\"https://github.com/kaorun343/vue-property-decorator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">vue-property-decorator</code></a>)带来了class和装饰器书写组件的支持。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'XxxComponent'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XxxComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> label<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用久了发现class组件也只是一个半成品，Vuejs的Api都要通过二次封装处理的方式实现支持，代码逻辑复用的问题依然没有很好的解决方案(仍然是mixins)。</p>\n<p>class组件也有好的方面，就是TS可以完整支持了。</p>\n<h3 id=\"compositionapi方式\" style=\"position:relative;\"><a href=\"#compositionapi%E6%96%B9%E5%BC%8F\" aria-label=\"compositionapi方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CompositionApi方式</h3>\n<p>CompositionApi作为一个全新的概念，抛弃了原有的options定义方式改为提供函数式的API。下面是一个🌰。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'XxxComponent'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      b<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n      obj\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>compositionApi的引入，标志性的就是组件内的<code class=\"language-text\">setup</code>方法。setup返回一个对象，对象中每一个键内容都会暴露给组件整体。</p>\n<p>使用compositionApi，可以带来下面的好处:</p>\n<ol>\n<li>data/methods/computed/watch/provide/inject以及组件生命周期函数等等都可以直接包含setup方法内部，使用起来直截了当。</li>\n<li>setup就是一个函数整体，在里面写代码摆脱了原Vuejs的组件模板定义方式，让使用者更加觉得在写普通的js一样。</li>\n<li>compositionApi带来的ref/reactive等等Api以及不再需要写this.xxx，给予了方便提取代码块的可能。</li>\n<li>使用compositionApi写代码就是在写普通js，没有this。TS的支持较好。</li>\n</ol>\n<h2 id=\"compositionapi的使用介绍\" style=\"position:relative;\"><a href=\"#compositionapi%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D\" aria-label=\"compositionapi的使用介绍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CompositionApi的使用介绍</h2>\n<blockquote>\n<p>官方文档中的基础内容就不赘述了，下面讲几点使用时的收获。</p>\n</blockquote>\n<h3 id=\"获取动态生成ref的组件\" style=\"position:relative;\"><a href=\"#%E8%8E%B7%E5%8F%96%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90ref%E7%9A%84%E7%BB%84%E4%BB%B6\" aria-label=\"获取动态生成ref的组件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>获取动态生成ref的组件</h3>\n<p>CompositionApi提供了<code class=\"language-text\">ref</code>作为页面组件ref的获取方式，但仅限于编码时ref已知的场景。</p>\n<p>对于运行时生成的ref组件，只能使用<code class=\"language-text\">ctx.refs[xxx]</code>的方式获取。(composition-api库的ctx类型SetupContext中没有描述，文档也没有说明，比较奇怪)。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>div<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">:ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>span' + ts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>span<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">const</span> ts <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> divRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 页面挂载后可以取得</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>refs<span class=\"token punctuation\">[</span><span class=\"token string\">'span'</span> <span class=\"token operator\">+</span> ts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此时ref=\"span + xxx\"的span只能使用这种方式获取</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      div<span class=\"token operator\">:</span> divRef<span class=\"token punctuation\">,</span>\n      ts\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"复杂页面组件内部数据管理\" style=\"position:relative;\"><a href=\"#%E5%A4%8D%E6%9D%82%E9%A1%B5%E9%9D%A2%E7%BB%84%E4%BB%B6%E5%86%85%E9%83%A8%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86\" aria-label=\"复杂页面组件内部数据管理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>复杂页面/组件内部数据管理</h3>\n<p>业务开发中的一些复杂页面，从便于维护的角度会拆分很多小组件。组件多、层级深一直是数据传递的一个痛点。从传统角度看，可以使用prop/emit、vuex等方式解决。</p>\n<p>prop/emit对于层级简单、组件数据简单的场景比较实用，一旦层级复杂或者出现兄弟等场景实现时就比较麻烦了。\nvuex可以说是一个比较万金油的方案，数据放进去、方法定义好就行。vuex也是options定义的方式，模板形式太强，且基本不支持TS类型系统。</p>\n<p>现在有了CompositionApi，可以使用<code class=\"language-text\">ref</code>/<code class=\"language-text\">reactive</code>以及<code class=\"language-text\">provide</code>/<code class=\"language-text\">inject</code>来传递管理数据了。配合TS类型系统体验更佳。下面是使用的🌰。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 数据逻辑部分</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">initData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// data为组件内部共享的数据</span>\n  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">const</span> methodWithData<span class=\"token operator\">:</span> <span class=\"token function-variable function\">XxType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// data.value 相关的操作逻辑代码</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> methodWithData <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 父组件</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">initData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 子孙组件</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> methodWithData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// methodWithData()</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"其他\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96\" aria-label=\"其他 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他</h2>\n<p>因为CompositionApi的函数式设计，给Vue项目的开发编写带来了新的活力。利用JS函数式稍加设计即可实现逻辑的封装、拆分，改善原来options方式的大组件容易越写越乱的问题。</p>\n<p>后续会慢慢扩展CompositionApi的使用并记录，探索<code class=\"language-text\">函数式</code> + <code class=\"language-text\">Vuejs</code>的新应用场景。</p>","fields":{"slug":"/posts/vue-composition-api","tagSlugs":["/tag/vue/","/tag/composition-api/"]},"frontmatter":{"date":"2020-06-04 22:00","description":"Vue3版本推出在即，为了让广大用户提前感受新版特性，Vue官方推出了兼容Vue2的@vue/composition-api库。这里简单记录下近半年的使用收获。","tags":["vue","composition-api"],"title":"Vue2 & CompositionApi","socialImage":""}}},"pageContext":{"slug":"/posts/vue-composition-api"}}}