---
import IndexPage from "src/layouts/IndexPage.astro";
let posts = await Astro.glob("./about.md");
let {Content, frontmatter} = posts[0];

---

<IndexPage frontmatter={frontmatter}>
  <article class="markdown-body">
    <Content/>
  </article>
</IndexPage>


<script>
  import { Fancybox } from "@fancyapps/ui";
  import "@fancyapps/ui/dist/fancybox/fancybox.css";
  Fancybox.bind("[data-fancybox]");
  // 给所有的a标签添加target属性和不追踪
  const markdownBody = document.querySelector(".markdown-body");
  // 如果没有markdownBody则直接返回
  if (markdownBody) {
    let images = markdownBody.querySelectorAll("img");
    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const image = entry.target;
          const data_src = image.getAttribute("data-src");
          const data_alt = image.getAttribute("data-alt");
          image.setAttribute("data-fancybox", "gallery")
          if(data_src){
            image.setAttribute("src", data_src);
          }
          if(data_alt){
            image.setAttribute("alt", data_alt);
          }
          observer.unobserve(image);
        }
      });
    };

    const observer = new IntersectionObserver(callback);
    images.forEach((image) => {
      observer.observe(image);
    });

    var links = markdownBody.querySelectorAll("a");
    // 循环遍历链接标签
    for (var i = 0; i < links.length; i++) {
      // 给每个链接标签添加 target 属性
      let names = links[i].getAttributeNames()
      if (!names.includes('data-footnote-backref') && !names.includes('data-footnote-ref')) {
        links[i].setAttribute("target", "_blank");
        links[i].setAttribute("rel", "nofollow noreferrer");
      }
    }
  }
</script>
